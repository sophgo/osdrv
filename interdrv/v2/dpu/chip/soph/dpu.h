#ifndef _DPU_MODULE_
#define _DPU_MODULE_

//#include <stdio.h>
#include <linux/comm_errno.h>
#include <base_ctx.h>
#include <linux/comm_buffer.h>
#include <linux/comm_vb.h>
#include "linux/kernel.h"
#include <linux/errno.h>
#include <linux/defines.h>
#include <linux/comm_dpu.h>
#include "dpu_reg.h"
#include "dpu_core.h"
#include "../../common/dpu_debug.h"

#include "../../common/reg.h"
#include <linux/dpu_uapi.h>
#include <linux/module.h>
#include "linux/kernel.h"
#include <linux/kthread.h>
#include <linux/miscdevice.h>
#include <linux/spinlock.h>
#include <linux/wait.h>
#include <linux/mutex.h>
#include <linux/types.h>
#include <linux/timex.h>
#include <base_ctx.h>

#undef DPU_ALIGN
#define DPU_ALIGN(src,align) ((src+(align-1)) & ~((align-1)))
#define FAILURE -1
#define SUCCESS 0
#define TRUE 1
#define FALSE 0


typedef struct _dpu_reg_s{
    unsigned int reg_dpu_enable ;
    unsigned int reg_dpu_sgbm_enable ;
    unsigned int reg_dpu_img_width ;
    unsigned int reg_dpu_img_height ;
    unsigned int reg_dpu_min_d ;
    unsigned int reg_dpu_rshift1 ;
    unsigned int reg_dpu_rshift2 ;
    unsigned int reg_dpu_ca_p1 ;
    unsigned int reg_dpu_ca_p2 ;
    unsigned int reg_dpu_uniq_ratio ;
    unsigned int reg_dpu_disp_shift ;
    unsigned int reg_dpu_bfw_size;
    unsigned int reg_dpu_census_shift ;
    unsigned int reg_dpu_nd_ds ;
    unsigned int reg_dpu_fxbaseline ;
    unsigned int reg_dpu_disp_range ;
    unsigned int reg_dpu_dcc_a234 ;
    unsigned int reg_dpu_invalid_def ;
    unsigned int reg_dpu_data_sel;

    unsigned int reg_dpu_fgs_enable ;
    unsigned int reg_dpu_fgs_max_count ;
    unsigned int reg_dpu_fgs_max_t ;
    unsigned int reg_dpu_fgs_w_scale ;
    unsigned int reg_dpu_fgs_c_scale ;
    unsigned int reg_dpu_fgs_f_scale ;
    unsigned int reg_dpu_fgs_img_width ;
    unsigned int reg_dpu_fgs_img_height ;
    unsigned int reg_dpu_fgs_output_bit_choose ;
    unsigned int reg_dpu_fgs_output_unit_choose ;
    unsigned int reg_dpu_src_disp_mux ;

    unsigned int reg_sgbm_bf_st_dma_enable;
    unsigned int reg_sgbm_ld1_dma_enable;
    unsigned int reg_sgbm_ld2_dma_enable;
    unsigned int reg_sgbm_mux_st_dma_enable;
    unsigned int reg_dma_enable_fgs1;
    unsigned int reg_dma_enable_fgs2;
    unsigned int reg_dma_enable_fgs3;
    unsigned int reg_dma_enable_fgs4;

    unsigned int reg_sgbm_bf_st_crop_enable;
    unsigned int reg_sgbm_ld1_crop_enable;
    unsigned int reg_sgbm_ld2_crop_enable;
    unsigned int reg_sgbm_mux_st_crop_enable;

    unsigned int reg_crop_enable_fgs_independent;
    unsigned int reg_crop_enable_fgs_chfh;
    unsigned int reg_crop_enable_fgs_gx;
    unsigned int reg_crop_enable_fgs_ux;

    unsigned int reg_sgbm2fgs_online;

	struct mutex lock;

} dpu_reg_s;

enum handler_state {
	HANDLER_STATE_STOP = 0,
	HANDLER_STATE_RUN,
	HANDLER_STATE_SUSPEND,
	HANDLER_STATE_RESUME,
	HANDLER_STATE_MAX
};

enum dpu_grp_state {
	GRP_STATE_IDLE = 0x0,
	GRP_STATE_BUF_FILLED = 0x1,
	GRP_STATE_HW_STARTED = 0x2,
	GPP_MAX_STATE
};

typedef enum _dpu_intr_state_e{
	DPU_INTR_STATE_DONE = 0x0,
	DPU_INTR_STATE_OTHERS = 0x1,
	DPU_INTR_STATE_BUTT
}dpu_intr_state_e;

struct dpu_job_queue_status_s{
	unsigned int busy_num ; //numbers of busy nodes
	unsigned int free_num ; //numbers of free nodes
};

struct dpu_grp_work_status_s {
	unsigned char grp_id;
	unsigned int frame_rate;   		// Output frame rate
	unsigned int start_cnt;    		//Number of times of task startup
	unsigned int start_fail_cnt; 		//Number of times of task startup failure
	unsigned int send_pic_cnt;  		//Number of times of successful image transmission
	unsigned int cur_task_cost_tm; 		//Time taken to complete the current task
	unsigned int max_task_cost_tm; 		//Historical maximum time taken to complete a task
};

struct dpu_run_time_info_s {
	int cnt_per_sec; 			//Number of interrupts performed in the last second
	unsigned int max_cnt_per_sec; 		//Historical maximum number of interrupts performed in one second
	unsigned int total_int_cnt_last_sec; //Number of interrupts reported in the last second
	unsigned int total_int_cnt; 		//Number of interrupts generated by the DPU
	unsigned int cost_tm;      		//Time taken to performed the last interrupt /us
	unsigned int max_cost_tm;      		//Maximum time taken to performed the last interrupt /us
	unsigned int cost_tm_per_sec;      	//Time taken to performed in the last interrupt /us
	unsigned int max_cost_tm_per_sec;      //Maximum time taken to performed in the last interrupt /us
	unsigned int total_int_cost_tm;     //Total time taken to performed all the interrupt /us
	unsigned int cost_tm_per_frm;     	//Time taken to process a single frame of image  /us
	unsigned int hw_cost_tm_per_frm;     //Time taken by the hardware to process a single frame of image
	unsigned long long run_tm;              //Total running time of DPU /s
};

struct dpu_chn_cfg_s {
	unsigned char isenabled;
	unsigned char ismuted;
	dpu_chn_attr_s chn_attr;
	pixel_format_e pixel_format;
	unsigned int blk_size;
	unsigned int align;
	unsigned int vb_pool;
	unsigned int stride;
	unsigned char is_cfg_changed;
	vb_cal_config_s vb_config;
};

struct dpu_ctx_s {
	unsigned char iscreated;
	unsigned char isstarted;
	dpu_grp_attr_s grp_attr;
	struct dpu_chn_cfg_s chn_cfgs[DPU_MAX_CHN_NUM];
	struct mutex lock;
	struct dpu_grp_work_status_s grp_work_wtatus;
	unsigned int grp_state;
	unsigned char dpu_dev_id;
	unsigned char is_dma_cfg;
	unsigned int stride_arry[2];
	unsigned int chn_num;
	pixel_format_e pixel_format;
	struct dpu_job_queue_status_s input_job_status;
	struct dpu_job_queue_status_s working_job_status;
	struct dpu_job_queue_status_s output_job_status;
	vb_blk chfh_blk;
	int frame_num;
	int cost_time_for_sec;
	unsigned long long phyaddr_chfh;
	void *   viraddr_chfh;
};

struct dpu_handle_info_s {
	struct list_head list;
	struct file *file;
	unsigned char use_grp[8];
	pid_t open_pid;
};

struct dpu_dev_s {
	struct miscdevice miscdev;
	spinlock_t lock;
	struct mutex mutex;
	unsigned int irq_num;
	struct clk *clk_sys[2];
	unsigned int clk_sys1_freq;
	void *shared_mem;
	wait_queue_head_t wait;
	wait_queue_head_t send_frame_wait;
	wait_queue_head_t reset_wait;
	unsigned char reset_done;
	struct task_struct *thread;
	struct dpu_run_time_info_s run_time_info;
	struct timespec64 time_total_for_sec;
	unsigned int time_for_sec;
	unsigned int int_num_per_sec;
	struct timespec64 time_start;
	unsigned int time_end;
	unsigned int cost_time_for_sec ;
	unsigned int int_time_per_sec;
	unsigned char bbusy;
	unsigned char hw_busy;
	unsigned long long phyaddr_chfh;
	void *   viraddr_chfh;
	struct list_head handle_list;
	struct mutex dpu_lock;
	unsigned int bsuspend;
	struct mutex suspend_lock;
	unsigned int duty_ratio;
	unsigned int total_hwduration;
};

int dpu_create_grp(dpu_grp dpu_grp_id,dpu_grp_attr_s *pstGrpAttr);

int dpu_destroy_grp(dpu_grp dpu_grp_id);

dpu_grp dpu_get_available_grp(void);

int dpu_set_grp_attr(dpu_grp dpu_grp_id,const dpu_grp_attr_s *pstGrpAttr);

int dpu_get_grp_attr(dpu_grp dpu_grp_id,dpu_grp_attr_s *pstGrpAttr);

int dpu_start_grp(dpu_grp dpu_grp_id);

int dpu_stop_grp(dpu_grp dpu_grp_id);

int dpu_set_chn_attr(dpu_grp dpu_grp_id,dpu_chn  dpu_chn_id,const dpu_chn_attr_s *pchn_attr);

int dpu_get_chn_attr(dpu_grp dpu_grp_id,dpu_chn dpu_chn_id,dpu_chn_attr_s *pchn_attr);

int dpu_enable_chn(dpu_grp dpu_grp_id,dpu_chn dpu_chn_id);

int dpu_disable_chn(dpu_grp dpu_grp_id,dpu_chn dpu_chn_id);

int dpu_send_frame(dpu_grp dpu_grp_id,\
                                const video_frame_info_s *pst_left_frame,\
                                const video_frame_info_s *pst_right_frame,\
                                int millisec);

int dpu_send_chn_frame(dpu_grp dpu_grp_id,\
							dpu_chn dpu_chn_id,\
                            const video_frame_info_s *vdeo_frame_info,\
							int millisec);

int dpu_get_frame(dpu_grp dpu_grp_id,\
							dpu_chn dpu_chn_id,\
							video_frame_info_s *vdeo_frame_info,\
							int millisec);

int dpu_release_frame(dpu_grp dpu_grp_id,\
							dpu_chn dpu_chn_id,\
                            const video_frame_info_s *vdeo_frame_info);

void dpu_check_reg_write(void);

void dpu_check_reg_read(void);

void getsgbm_status(void);

void getfgs_status(void);

void dpu_irq_handler(unsigned char intr_status, struct dpu_dev_s *wdev);

void dpu_set_base_addr(void *base);

void dpu_set_base_addr_sgbm_dma(void *base1,void *base2,void *base3,void *base4);

void dpu_set_base_addr_fgs_dma(void *base1,void *base2,void *base3,void *base4);

int dpu_get_handle_info(struct dpu_dev_s *dpu_wdev, struct file *file, struct dpu_handle_info_s **f_list);

void dpu_mode_deinit(dpu_grp dpu_grp_id);

void dpu_init(void *arg);

void dpu_deinit(void *arg);

void dpu_reset(void);

void dpu_engine(dpu_grp workinggrp_id);

void dpu_intr_ctrl(unsigned char intr_mask);

void dpu_intr_clr(void);

unsigned char dpu_intr_status(void);

void dpu_notify_isr_evt(void);

struct dpu_ctx_s **dpu_get_shdw_ctx(void);

struct dpu_dev_s *dpu_get_dev(void);

struct dpu_handler_ctx_s *dpu_get_handler_ctx(void);

#define DPU_GRP_SUPPORT_FMT(fmt) \
	((fmt == PIXEL_FORMAT_YUV_400))

#define DPU_CHN_SUPPORT_FMT(fmt) \
	((fmt == PIXEL_FORMAT_YUV_400))

#define FRC_INVALID(ctx, dpu_chn_id)	\
	(ctx->chn_cfgs[dpu_chn_id].chn_attr.frame_rate.dst_frame_rate <= 0 ||		\
		ctx->chn_cfgs[dpu_chn_id].chn_attr.frame_rate.src_frame_rate <= 0 ||		\
		ctx->chn_cfgs[dpu_chn_id].chn_attr.frame_rate.dst_frame_rate >=		\
		ctx->chn_cfgs[dpu_chn_id].chn_attr.frame_rate.src_frame_rate)

// #define IS_FRAME_OFFSET_INVALID(f) 
// 	((f).offset_left < 0 || (f).offset_right < 0 || 
// 	 (f).offset_top < 0 || (f).offset_bottom < 0 || 
// 	 ((unsigned int)((f).offset_left + (f).offset_right) > (f).width) || 
// 	 ((unsigned int)((f).offset_top + (f).offset_bottom) > (f).height))

static inline int MOD_CHECK_NULL_PTR(mod_id_e mod, const void *ptr)
{
	if (mod >= ID_BUTT)
		return FAILURE;
	if (!ptr) {
		TRACE_DPU(DBG_ERR, "NULL pointer\n");
		return ERR_DPU_NULL_PTR;
	}
	return SUCCESS;
}

static inline int CHECK_DPU_CHN_FMT(dpu_chn chn_in, enum _pixel_format_e fmt)
{

	if (!DPU_CHN_SUPPORT_FMT(fmt)) {
	TRACE_DPU(DBG_ERR, "Chn(%d) pixel_format(%d) unsupported\n"
	, chn_in, fmt);
	return ERR_DPU_ILLEGAL_PARAM;
	}
	return SUCCESS;

}

#endif//_DPU_MODULE_
